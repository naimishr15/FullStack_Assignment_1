{"version":3,"sources":["shared/events.js","components/Controls/Controls.js","components/Comment/Comment.js","components/CommentList/CommentList.js","components/CommentInput/CommentInput.js","components/App/App.js","index.js"],"names":["Events","Controls","url","state","roomList","selectedRoom","isSomeRoomJoined","isListeningToRoomJoinAndLeave","username","listenToRoomJoined","props","socket","on","data","console","log","setState","listenToRoomLeave","listenToConnect","getAllRooms","a","axios","get","rooms","joinOrLeaveRoom","emit","roomName","this","map","room","value","key","className","type","checked","isConnected","onChange","onConnectionToggle","disabled","event","target","onClick","React","Component","Comment","href","alt","src","author","avatar","timeAgo","content","TimeAgo","addLocale","en","CommentList","comments","sort","b","Date","timestamp","comment","_id","format","message","faker","image","CommentInput","messageRoom","App","commentList","connectSocket","io","connect","listenToDisconnect","disconnectSocket","disconnect","getMessageOfRoom","post","roomname","listenToMessages","off","onRoomJoin","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10eaf565.chunk.js","sourcesContent":["export const Events = {\r\n  ONDISCONNECT: \"disconnect\",\r\n  CONNECTED: \"connected\",\r\n  JOINROOM: \"join\",\r\n  JOINED: \"joined\",\r\n  LEAVEROOM: \"leave\",\r\n  LEFT: \"left\",\r\n  MESSAGE: \"message\"\r\n};\r\n","import React from \"react\";\r\nimport \"./Controls.css\";\r\nimport { Events } from \"../../shared/events\";\r\nimport axios from \"axios\";\r\n\r\nexport class Controls extends React.Component {\r\n  url = \"\";\r\n  state = {\r\n    roomList: [],\r\n    selectedRoom: \"\",\r\n    isSomeRoomJoined: false,\r\n    isListeningToRoomJoinAndLeave: false,\r\n    username: null\r\n  };\r\n\r\n  /**\r\n   * On Component Creation\r\n   *\r\n   * @memberof Controls\r\n   */\r\n  componentDidMount() {\r\n    this.getAllRooms();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.socket && !this.state.isListeningToRoomJoinAndLeave) {\r\n      this.setState({ isListeningToRoomJoinAndLeave: true });\r\n      this.listenToRoomJoined();\r\n      this.listenToRoomLeave();\r\n      this.listenToConnect();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listen when user join some room\r\n   *\r\n   * @memberof Controls\r\n   */\r\n  listenToRoomJoined = () => {\r\n    this.props.socket.on(Events.JOINED, data => {\r\n      console.log(\"JOINED ROOM -> :\", data);\r\n      this.setState({ isSomeRoomJoined: true });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Listen when join leave some room\r\n   *\r\n   * @memberof Controls\r\n   */\r\n  listenToRoomLeave = () => {\r\n    this.props.socket.on(Events.LEFT, data => {\r\n      console.log(\"ROOM LEAVE -> :\", data);\r\n      if (data.username === this.state.username) {\r\n        this.setState({ isSomeRoomJoined: false });\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Listen when join leave some room\r\n   *\r\n   * @memberof Controls\r\n   */\r\n  listenToConnect = () => {\r\n    this.props.socket.on(Events.CONNECTED, data => {\r\n      console.log(\"CONNECTED ->:\", data);\r\n      this.setState({ username: data.username });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Get list of all rooms\r\n   *\r\n   * @memberof Controls\r\n   */\r\n  getAllRooms = async () => {\r\n    const rooms = await axios.get(`${this.url}/api/rooms`);\r\n    this.setState({ roomList: rooms.data.rooms });\r\n  };\r\n\r\n  /**\r\n   * Join or leave a room\r\n   *\r\n   * @memberof Controls\r\n   */\r\n  joinOrLeaveRoom = async () => {\r\n    if (this.state.isSomeRoomJoined) {\r\n      this.props.socket.emit(Events.LEAVEROOM, {\r\n        roomName: this.state.selectedRoom,\r\n        username: this.state.username\r\n      });\r\n    } else {\r\n      this.props.socket.emit(Events.JOINROOM, {\r\n        roomName: this.state.selectedRoom,\r\n        username: this.state.username\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const rooms = this.state.roomList.map(room => {\r\n      return (\r\n        <option value={room.roomName} key={room.roomName}>\r\n          {room.roomName}\r\n        </option>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"ui form\">\r\n        <div className=\"ui row mb-2\">\r\n          <div className=\"ui toggle checkbox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={this.props.isConnected}\r\n              onChange={this.props.onConnectionToggle}\r\n              disabled={this.state.isSomeRoomJoined}\r\n            />\r\n            <label>{this.props.isConnected ? \"Disconnect\" : \"Connect\"}</label>\r\n          </div>\r\n        </div>\r\n        <div className=\"ui row two fields\">\r\n          <div className=\"field\">\r\n            <select\r\n              value={this.state.selectedRoom}\r\n              disabled={!this.props.isConnected || this.state.isSomeRoomJoined}\r\n              onChange={event =>\r\n                this.setState({ selectedRoom: event.target.value })\r\n              }\r\n            >\r\n              <option value=\"\">Select A Room</option>\r\n              {rooms}\r\n            </select>\r\n          </div>\r\n          <div className=\"field\">\r\n            <button\r\n              className=\"ui primary button\"\r\n              disabled={!this.props.isConnected}\r\n              onClick={this.joinOrLeaveRoom}\r\n            >\r\n              {this.state.isSomeRoomJoined ? \"Leave\" : \"Join\"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./Comment.css\";\r\n\r\nexport class Comment extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"comment\">\r\n        <a href=\"/\" className=\"avatar\">\r\n          <img\r\n            alt=\"avatar\"\r\n            src={\r\n              this.props.author === \"App Bot\" ? \"./bot.png\" : this.props.avatar\r\n            }\r\n          />\r\n        </a>\r\n        <div className=\"content\">\r\n          <a\r\n            href=\"/\"\r\n            className={`author ${this.props.author === \"App Bot\" ? \"red\" : \"\"}`}\r\n          >\r\n            {this.props.author}\r\n          </a>\r\n          <div className=\"metadata\">\r\n            <span className=\"date\">{this.props.timeAgo}</span>\r\n          </div>\r\n          <div className=\"text\">{this.props.content}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport faker from \"faker\";\r\nimport \"./CommentList.css\";\r\nimport { Comment } from \"../Comment/Comment\";\r\nimport TimeAgo from \"javascript-time-ago\";\r\nimport en from \"javascript-time-ago/locale/en\";\r\n\r\nTimeAgo.addLocale(en);\r\n\r\nexport class CommentList extends React.Component {\r\n  timeAgo = new TimeAgo();\r\n\r\n  render() {\r\n    let comments = this.props.comments;\r\n    comments.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n    comments = this.props.comments.map(comment => {\r\n      return (\r\n        <Comment\r\n          key={comment._id}\r\n          author={comment.username}\r\n          timeAgo={this.timeAgo.format(new Date(comment.timestamp))}\r\n          content={comment.message}\r\n          avatar={faker.image.avatar()}\r\n        />\r\n      );\r\n    });\r\n    return <div className=\"ui segment comments comment-list\">{comments}</div>;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./CommentInput.css\";\r\nimport { Events } from \"../../shared/events\";\r\n\r\nexport class CommentInput extends React.Component {\r\n  state = {\r\n    comment: \"\"\r\n  };\r\n  messageRoom = () => {\r\n    this.props.socket.emit(Events.MESSAGE, {\r\n      roomName: this.props.roomName,\r\n      message: this.state.comment,\r\n      timestamp: new Date()\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ui form\">\r\n        <div className=\"field\">\r\n          <label>\r\n            Username:{\" \"}\r\n            <span className=\"red\">\r\n              {this.props.username ? \"(\" + this.props.username + \")\" : null}\r\n            </span>\r\n          </label>\r\n          <textarea\r\n            disabled={!this.props.isConnected || !this.props.isSomeRoomJoined}\r\n            value={this.state.comment}\r\n            onChange={event => this.setState({ comment: event.target.value })}\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"field right-align\">\r\n          <button\r\n            className=\"ui teal button\"\r\n            onClick={this.messageRoom}\r\n            disabled={!this.props.isConnected || !this.props.isSomeRoomJoined}\r\n          >\r\n            Comment\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"./App.css\";\r\nimport { Controls } from \"../Controls/Controls\";\r\nimport { CommentList } from \"../CommentList/CommentList\";\r\nimport { CommentInput } from \"../CommentInput/CommentInput\";\r\nimport { Events } from \"../../shared/events\";\r\nimport axios from \"axios\";\r\n\r\nexport class App extends React.Component {\r\n  url = \"\";\r\n  socket;\r\n  state = {\r\n    isConnected: false,\r\n    roomName: \"\",\r\n    username: null,\r\n    isSomeRoomJoined: false,\r\n    commentList: []\r\n  };\r\n\r\n  /**\r\n   * Connect to socket\r\n   */\r\n  connectSocket = () => {\r\n    this.socket = io.connect(this.url);\r\n    this.listenToRoomJoined();\r\n    this.listenToRoomLeave();\r\n    this.listenToDisconnect();\r\n    this.listenToConnect();\r\n  };\r\n\r\n  /**\r\n   * Disconnect socket\r\n   */\r\n  disconnectSocket = () => {\r\n    this.socket.disconnect();\r\n  };\r\n\r\n  /**\r\n   * On connection button toggle\r\n   *\r\n   * @memberof Controls\r\n   */\r\n  onConnectionToggle = () => {\r\n    this.setState({ isConnected: !this.state.isConnected });\r\n\r\n    if (this.state.isConnected) {\r\n      this.disconnectSocket();\r\n    } else {\r\n      this.connectSocket();\r\n    }\r\n  };\r\n\r\n  /**\r\n   *Get messages of a given room\r\n   *\r\n   * @memberof App\r\n   */\r\n  getMessageOfRoom = async roomName => {\r\n    const comments = await axios.post(`${this.url}/api/roomhistory`, {\r\n      roomname: roomName\r\n    });\r\n    this.setState({ commentList: comments.data });\r\n  };\r\n\r\n  /**\r\n   * Listen when user join some room\r\n   *\r\n   * @memberof Controls\r\n   */\r\n  listenToRoomJoined = () => {\r\n    this.socket.on(Events.JOINED, data => {\r\n      console.log(\"ROOM JOINED -> :\", data);\r\n      this.setState({\r\n        roomName: data.roomName,\r\n        isSomeRoomJoined: true\r\n      });\r\n      this.listenToMessages();\r\n      this.getMessageOfRoom(data.roomName);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Listen when join leave some room\r\n   *\r\n   * @memberof Controls\r\n   */\r\n  listenToConnect = () => {\r\n    this.socket.on(Events.CONNECTED, data => {\r\n      console.log(\"CONNECTED :\", data);\r\n      this.setState({ username: data.username });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Listen when join leave some room\r\n   *\r\n   * @memberof Controls\r\n   */\r\n  listenToDisconnect = () => {\r\n    this.socket.on(Events.ONDISCONNECT, data => {\r\n      console.log(\"DISCONNECTED :\", data);\r\n      this.setState({ username: null });\r\n    });\r\n  };\r\n  /**\r\n   * Listen when join leave some room\r\n   *\r\n   * @memberof Controls\r\n   */\r\n  listenToRoomLeave = () => {\r\n    this.socket.on(Events.LEFT, data => {\r\n      console.log(\"ROOM LEAVE :\", data);\r\n      if (data.username === this.state.username) {\r\n        this.setState({\r\n          isSomeRoomJoined: false,\r\n          roomName: \"\",\r\n          commentList: []\r\n        });\r\n        this.socket.off(Events.MESSAGE);\r\n      }\r\n    });\r\n  };\r\n\r\n  listenToMessages = () => {\r\n    this.socket.on(Events.MESSAGE, data => {\r\n      console.log(\"MESSAGE :\", data);\r\n      this.getMessageOfRoom(this.state.roomName);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Render current component UI\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"ui container\">\r\n        <div className=\"ui grid\">\r\n          <div className=\"two column row\">\r\n            <div className=\"column\">\r\n              <CommentList comments={this.state.commentList} />\r\n            </div>\r\n            <div className=\"column\">\r\n              <Controls\r\n                isConnected={this.state.isConnected}\r\n                onConnectionToggle={this.onConnectionToggle}\r\n                onRoomJoin={this.onRoomJoin}\r\n                socket={this.socket}\r\n              />\r\n              <CommentInput\r\n                isConnected={this.state.isConnected}\r\n                roomName={this.state.roomName}\r\n                isSomeRoomJoined={this.state.isSomeRoomJoined}\r\n                socket={this.socket}\r\n                username={this.state.username}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components/App/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}